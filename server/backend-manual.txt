************************
*      GLOBAL          *
************************

AUTH
------
- POST /auth/register
  - Description: ลงทะเบียนผู้ใช้ใหม่
  - Body:
    {
      "firstname": <string>,
      "lastname": <string>,
      "username": <string>,
      "email": <string>,
      "password": <string>
    }
  - Notes: ทุกฟิลด์เป็นฟิลด์ที่จำเป็น อีเมลและชื่อผู้ใช้ต้องไม่ซ้ำกัน

- POST /auth/login
  - Description: เข้าสู่ระบบผู้ใช้ที่มีอยู่
  - Body:
    {
      "email": <string> (อีเมลหรือชื่อผู้ใช้),
      "password": <string>
    }
  - Notes: สามารถใช้ได้ทั้งอีเมลหรือชื่อผู้ใช้


USER
------
- GET /users/profile
  - Description: ดึงข้อมูลโปรไฟล์ของผู้ใช้
  - Headers:
    - Authorization: Bearer <jwt>
  - Notes: จำเป็นต้องใช้ JWT สำหรับการตรวจสอบสิทธิ์ ไม่ต้องใส่ข้อมูลใน Body


************************
*       ADMIN          *
************************

CUSTOMER
------
- GET /customers/admin-access
  - Description: ดึงข้อมูลลูกค้าทั้งหมด
  - Headers:
    - Authorization: Bearer <jwt>
  - Query Params (optional):
    - dealer_id: <integer>
    - team_id: <integer>
    - leader_id: <integer>
  - Notes: ต้องใช้ JWT และสามารถกรองลูกค้าโดยใช้ dealer_id, team_id หรือ leader_id ได้


TEAM
------
- POST /teams/admin-access
  - Description: สร้างทีมใหม่
  - Headers:
    - Authorization: Bearer <jwt>
  - Body:
    {
      "name": <string> (ต้องไม่ซ้ำกัน),
      "leader": <integer> (leader_id),
      "members": <array of integers> (รหัสสมาชิก)
    }
  - Notes: ต้องใช้ JWT ชื่อทีมต้องไม่ซ้ำกัน

- PUT /teams/admin-access/:<team_id>
  - Description: อัพเดทข้อมูลทีมที่มีอยู่
  - Headers:
    - Authorization: Bearer <jwt>
  - Body:
    {
      "name": <string> (ต้องไม่ซ้ำกัน),
      "leader": <integer> (leader_id),
      "members": <array of integers> (รหัสสมาชิก)
    }
  - Notes: ต้องใช้ JWT ชื่อทีมต้องไม่ซ้ำกัน และสามารถอัพเดทฟิลด์ใดก็ได้

- GET /teams/admin-access
  - Description: ค้นหาทีมทั้งหมด/หาโดยชื่อของทีม
  - Headers:
    - Authorization: Bearer <jwt>
  - Query Params (optional):
    - team_name: <string>
  - Notes: ต้องใช้ JWT และสามารถกรองทีมโดยใช้ team_name ได้


USER
------
- GET /users/admin-access
  - Description: ดึงข้อมูลผู้ใช้งานทั้งหมด
  - Headers:
    - Authorization: Bearer <jwt>
  - Query Params (optional):
    - username: <string>
  - Notes: ต้องใช้ JWT และสามารถกรองผู้ใช้งานโดยใช้ username ได้

***************************
*    TEAM-LEADER          *
***************************

CUSTOMER
------
- GET /customers/team-leader-access
  - Description: ดึงข้อมูลลูกค้าที่เกี่ยวข้องกับหัวหน้าทีมที่ร้องขอข้อมูล
  - Headers:
    - Authorization: Bearer <jwt>
  - Query Params (optional):
    - dealer_id: <integer>
  - Notes: จำเป็นต้องใช้ JWT ของผู้ใช้ที่เป็นหัวหน้าทีม และสามารถกรองข้อมูลตาม dealer_id ได้


TEAM
------
- GET /teams/team-leader-access
  - Description: ดึงข้อมูลทีมของหัวหน้าทีมที่ร้องขอข้อมูล
  - Headers:
    - Authorization: Bearer <jwt>
  - Notes: จำเป็นต้องใช้ JWT ของผู้ใช้ที่เป็นหัวหน้าทีม


***************************
*    TEAM-WORKER          *
***************************

CUSTOMER
------
- GET /customers/team-worker-access
  - Description: ดึงข้อมูลลูกค้าที่สามารถเข้าถึงได้โดยทีมเวิร์คเกอร์ที่ร้องขอข้อมูล
  - Headers:
    - Authorization: Bearer <jwt>
  - Query Params (optional):
    - id_card: <string>
  - Notes: จำเป็นต้องใช้ JWT ของผู้ใช้ที่เป็นทีมเวิร์คเกอร์ และสามารถกรองข้อมูลตาม id_card ได้

- POST /customers/register
  - Description: ลงทะเบียนลูกค้าใหม่
  - Headers:
    - Authorization: Bearer <jwt>
  - Body:
    {
      "firstname": <string>,
      "lastname": <string>,
      "identification_number": <string>
    }
  - Notes: จำเป็นต้องใช้ JWT ของผู้ใช้ที่เป็นทีมเวิร์คเกอร์, ทุกฟิลด์ใน body ต้องใส่ข้อมูล

- PUT /customers/team-worker-access/:<customer_id>
  - Description: แก้ไขสถานะการสนใจสินค้าของลูกค้า
  - Headers:
    - Authorization: Bearer <jwt>
  - Body:
    {
      "status": <enum> ("high", "medium", "low")
    }
  - Notes: จำเป็นต้องใช้ JWT ของผู้ใช้ที่เป็นทีมเวิร์คเกอร์ 